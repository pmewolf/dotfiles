#  ----------------------------------------------------------------------------
#
#  Sections:
#       1_Environment_Configuration
#       2_Alias_&_Basic_Func
#       3_File_and_Folder_Management
#       4_Searching
#       5_Process_Management
#       6_Networking
#       7_System_Operations_&_Information
#       8_Web_Development
#       9_Reminders_&_Notes
#
#  Ref: 
#       https://c.camden.rutgers.edu/linux_resources/shell_scripting/html/sample-bashrc.html
#
#  ----------------------------------------------------------------------------

#   -----------------------------------
#   1_Environment_Configuration
#   -----------------------------------

#   Generated by Git for Windows
#   ------------------------------------------------------------
    test -f ~/.profile && . ~/.profile
    test -f ~/.bashrc && . ~/.bashrc

#   Define Color 
#   ------------------------------------------------------------
    DARKGRAY='\e[1;30m'
    red='\e[0;31m'
    RED='\e[1;31m'
    green='\e[0;32m'
    GREEN='\e[1;32m'
    yellow='\e[0;33m'
    YELLOW='\e[1;33m'
    blue='\e[0;34m'
    BLUE='\e[1;34m'
    cyan='\e[0;36m'
    CYAN='\e[1;36m'
    NC='\e[0m'              # No Color

#   Setting $DISPLAY 
#   ------------------------------------------------------------
    get_xserver() {
        case $TERM in
           xterm )
                XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' ) 
                # Ane-Pieter Wieringa suggests the following alternative:
                # I_AM=$(who am i)
                # SERVER=${I_AM#*(}
                # SERVER=${SERVER%*)}
    
                XSERVER=${XSERVER%%:*}
                ;;
            aterm | rxvt)
            # Find some code that works here. ...
                ;;
        esac  
    }
    
    if [ -z ${DISPLAY:=""} ]; then
        get_xserver
        if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || \
          ${XSERVER} == "unix" ]]; then 
            DISPLAY=":0.0"          # Display on local host.
        else
            DISPLAY=${XSERVER}:0.0  # Display on remote host.
        fi
    fi
    
    export DISPLAY

#   OS Detection
#   ------------------------------------------------------------
    unameOut="$(uname -s)"
    case "${unameOut}" in
        Linux*)     MACHINE=Linux;;
        Darwin*)    MACHINE=Mac;;
        CYGWIN*)    MACHINE=Cygwin;;
        MINGW*)     MACHINE=MinGw;;
        *)          MACHINE="UNKNOWN:${unameOut}"
    esac

#   Change Prompt
#   ------------------------------------------------------------
    if [[ "${DISPLAY%%:0*}" != "" ]]; then  
        HILIT=${red}   # remote machine: prompt will be partly red
    else
        HILIT=${cyan}  # local machine: prompt will be partly cyan
    fi

    fastprompt() {
        unset PROMPT_COMMAND
        case $TERM in
            *term | rxvt )
                #PS1="$HILIT[\h]$NC\W > \[\033]0;\${TERM} [\u@\h] \w\007\]" ;;
                PS1="$HILIT[\u@\h]$BLUE\w$NC > " ;;
            linux )
                PS1="$HILIT[\h]$BLUE\w$NC > " ;;
            *)
                PS1="[\h] \w > " ;;
        esac
    }

    _powerprompt() {
        if type -p "uptime" ; then
            LOAD=$(uptime|sed -e "s/.*: \([^,]*\).*/\1/" -e "s/ //g")
        else
            LOAD=""
        fi
    }

    powerprompt() {
        PROMPT_COMMAND=_powerprompt
        case $TERM in
            *term | rxvt  )
                #PS1="${HILIT}[\A - \$LOAD]$NC [\u@\h \#] \w > \
                #     \[\033]0;\${TERM} [\u@\h] \w\007\]" ;;
                PS1="$HILIT[\A-\$LOAD]$yellow[\u@\h \#]$BLUE[\w]$NC > " ;;
            linux )
                PS1="$HILIT[\A-\$LOAD]$yellow[\u@\h \#]$BLUE[\w]$NC > " ;;
            * )
                PS1="[\A-\$LOAD][\u@\h \#][\w] > " ;;
        esac
    
    }
    
    #export PS1="________________________________________________________________________________\n| \w @ \h (\u) \n| => "
    #export PS2="| => "
    fastprompt
    #powerprompt         

#   Set Paths
#   ------------------------------------------------------------
    #export PATH="$PATH:/usr/local/bin/"
    #export PATH="/usr/local/git/bin:/sw/bin/:/usr/local/bin:/usr/local/:/usr/local/sbin:/usr/local/mysql/bin:$PATH"

#   Set Default Editor (change 'Nano' to the editor of your choice)
#   ------------------------------------------------------------
    #export EDITOR=/usr/bin/nano

#   Set default blocksize for ls, df, du
#   from this: http://hints.macworld.com/comment.php?mode=view&cid=24491
#   ------------------------------------------------------------
    export BLOCKSIZE=1k

#   Add color to terminal
#   from http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
#   ------------------------------------------------------------
    if [ ${MACHINE} != 'MAC' ]; then
        export CLICOLOR=1
        export LSCOLORS=ExFxBxDxCxegedabagacad
    fi

#   System settings
#   ------------------------------------------------------------
    ulimit -S -c 0          # Don't want any coredumps.
    set -o notify
    set -o noclobber
    set -o ignoreeof
    #set -o nounset
    #set -o xtrace          # Useful for debuging.
    
    # Enable options:
    shopt -s cdspell
    shopt -s cdable_vars
    shopt -s checkhash
    shopt -s checkwinsize
    shopt -s sourcepath
    shopt -s no_empty_cmd_completion
    shopt -s cmdhist
    shopt -s histappend histreedit histverify
    shopt -s extglob        # Necessary for programmable completion.
    
    # Disable options:
    shopt -u mailwarn
    unset MAILCHECK         # Don't want my shell to warn me of incoming mail.
    
    export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n'
    export HISTTIMEFORMAT="%H:%M > "
    export HISTIGNORE="&:bg:fg:ll:h"
    export HOSTFILE=$HOME/.hosts    # Put list of remote hosts in ~/.hosts ...

#   Greeting, motd etc...
#   ------------------------------------------------------------
    # Looks best on a terminal with black background.....
    echo -e "${CYAN}This is BASH ${RED}${BASH_VERSION%.*}\
    ${CYAN} - DISPLAY on ${RED}$DISPLAY${NC}"
    date
    if [ -x /usr/games/fortune ]; then
        /usr/games/fortune -s     # Makes our day a bit more fun.... :-)
    fi
    
    _exit() {           # Function to run upon exit of shell.
        echo -e "${RED}Hasta la vista, baby${NC}"
    }
    trap _exit EXIT

#   -----------------------------------
#   2_Alias_&_Basic_Func
#   -----------------------------------

#   The 'ls' family (this assumes you use a recent GNU ls)
#   ------------------------------------------------------------
    #alias ll="ls -l --group-directories-first"
    alias ll="ls -FGlAhp --group-directories-first"
    alias ls='ls -hF --color'                   # add colors for filetype recognition
    alias la='ls -Al'                           # show hidden files
    alias lx='ls -lXB'                          # sort by extension
    alias lk='ls -lSr'                          # sort by size, biggest last
    alias lc='ls -ltcr'                         # sort by and show change time, most recent last
    alias lu='ls -ltur'                         # sort by and show access time, most recent last
    alias lt='ls -ltr'                          # sort by date, most recent last
    alias lm='ls -al |more'                     # pipe through 'more'
    alias lr='ls -lR'                           # recursive ls
    alias tree='tree -Csu'                      # nice alternative to 'recursive ls'

#   ------------------------------------------------------------
    alias rm='rm -i'
    alias h='history'
    alias j='jobs -l'
    alias du='du -kh'                           # Makes a more readable output.
    alias df='df -kTh'
    alias more='less'
    
#   ------------------------------------------------------------
    alias cp='cp -iv'                           # Preferred 'cp' implementation
    alias mv='mv -iv'                           # Preferred 'mv' implementation
    alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
    #alias ll='ls -FGlAhp'                       # Preferred 'ls' implementation
    alias less='less -FSRXc'                    # Preferred 'less' implementation
    cd() { builtin cd "$@"; ll; }               # Always list directory contents upon 'cd'
    alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
    alias ..='cd ../'                           # Go back 1 directory level
    alias ...='cd ../../'                       # Go back 2 directory levels
    alias .3='cd ../../../'                     # Go back 3 directory levels
    alias .4='cd ../../../../'                  # Go back 4 directory levels
    alias .5='cd ../../../../../'               # Go back 5 directory levels
    alias .6='cd ../../../../../../'            # Go back 6 directory levels
    alias edit='subl'                           # edit:         Opens any file in sublime editor
    alias f='open -a Finder ./'                 # f:            Opens current directory in MacOS Finder
    alias ~="cd ~"                              # ~:            Go Home
    alias c='clear'                             # c:            Clear terminal display
    alias which='type -all'                     # which:        Find executables
    alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
    alias show_options='shopt'                  # Show_options: display bash options settings
    alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
    alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive
    mcd() { mkdir -p "$1" && cd "$1"; }         # mcd:          Makes new Dir and jumps inside
    trash() { command mv "$@" ~/.Trash ; }      # trash:        Moves a file to the MacOS trash
    ql() { qlmanage -p "$*" >& /dev/null; }     # ql:           Opens any file in MacOS Quicklook Preview
    alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop

#   lr:  Full Recursive Directory Listing
#   ------------------------------------------
    alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.            Example: mans mplayer codec
#   --------------------------------------------------------------------
    mans() {
        man $1 | grep -iC2 --color=always $2 | less
    }

#   showa: to remind yourself of an alias (given some part of it)
#   ------------------------------------------------------------
    showa() { /usr/bin/grep --color=always -i -a1 $@ ~/Library/init/bash/aliases.bash | grep -v '^\s*$' | less -FSRXc ; }

#   -----------------------------------
#   3_File_and_Folder_Management
#   -----------------------------------

    zipf() { zip -r "$1".zip "$1" ; }           # zipf:         To create a ZIP archive of a folder
    alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir
    alias make1mb='mkfile 1m ./1MB.dat'         # make1mb:      Creates a file of 1mb size (all zeros)
    alias make5mb='mkfile 5m ./5MB.dat'         # make5mb:      Creates a file of 5mb size (all zeros)
    alias make10mb='mkfile 10m ./10MB.dat'      # make10mb:     Creates a file of 10mb size (all zeros)

#   cdf:  'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------
    cdf() {
        currFolderPath=$( /usr/bin/osascript <<EOT
            tell application "Finder"
                try
            set currFolder to (folder of the front window as alias)
                on error
            set currFolder to (path to desktop folder as alias)
                end try
                POSIX path of currFolder
            end tell
EOT
        )
        echo "cd to \"$currFolderPath\""
        cd "$currFolderPath"
    }

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
    extract() {
        if [ -f $1 ] ; then
          case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }

#   -----------------------------------
#   4_Searching
#   -----------------------------------

    alias qfind="find . -name "                         # qfind:    Quickly search for file
    #ff () { /usr/bin/find . -name "$@" ; }                      # Find file under the current directory
    ffs () { /usr/bin/find . -name "$@"'*' ; }                  # Find file whose name starts with a given string
    ffe () { /usr/bin/find . -name '*'"$@" ; }                  # Find file whose name ends with a given string
    ff () { /usr/bind/find . -type f -iname '*'$*'*' -ls ; }    # Find file with a pattern in name
    fe () { find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; } # Find a file with pattern $1 in name and Execute $2 on it:

    fstr(){             # Find a pattern in a set of files and highlight them:
        OPTIND=1
        local case=""
        local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
        while getopts :it opt
        do
            case "$opt" in
            i) case="-i " ;;
            *) echo "$usage"; return;;
            esac
        done
        shift $(( $OPTIND - 1 ))
        if [ "$#" -lt 1 ]; then
            echo "$usage"
            return;
        fi
        find . -type f -name "${2:-*}" -print0 | \
        xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more 
    }

    cuttail() {         # cut last n lines in file, 10 by default
        nlines=${2:-10}
        sed -n -e :a -e "1,${nlines}!{P;N;D;};N;ba" $1
    }

    lowercase() {       # move filenames to lowercase
        for file ; do
            filename=${file##*/}
            case "$filename" in
            */*) dirname==${file%/*} ;;
            *) dirname=.;;
            esac
            nf=$(echo $filename | tr A-Z a-z)
            newname="${dirname}/${nf}"
            if [ "$nf" != "$filename" ]; then
                mv "$file" "$newname"
                echo "lowercase: $file --> $newname"
            else
                echo "lowercase: $file not changed."
            fi
        done
    }

    swap() {            # Swap 2 filenames around, if they exist
        local TMPFILE=tmp.$$ 
    
        [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
        [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
        [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1
    
        mv "$1" $TMPFILE 
        mv "$2" "$1"
        mv $TMPFILE "$2"
    }

#   spotlight: Search for a file using MacOS Spotlight's metadata
#   -----------------------------------------------------------
    spotlight() { mdfind "kMDItemDisplayName == '$@'wc"; }


#   -----------------------------------
#   5_Process_Management
#   -----------------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid() { lsof -t -c "$@" ; }

#   memHogsTop, memHogsPs:  Find memory hogs
#   -----------------------------------------------------
    alias memHogsTop='top -l 1 -o rsize | head -20'
    alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

#   cpuHogs:  Find CPU hogs
#   -----------------------------------------------------
    alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

#   topForever:  Continual 'top' listing (every 10 seconds)
#   -----------------------------------------------------
    alias topForever='top -l 9999999 -s 10 -o cpu'

#   ttop:  Recommended 'top' invocation to minimize resources
#   ------------------------------------------------------------
#       Taken from this macosxhints article
#       http://www.macosxhints.com/article.php?story=20060816123853639
#   ------------------------------------------------------------
    alias ttop="top -R -F -s 10 -o rsize"

#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }
    pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

#   Misc utilities:
#   ------------------------------------------------------------
    killps() {          # Kill by process name.
        local pid pname sig="-TERM"   # Default signal.
        if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
            echo "Usage: killps [-SIGNAL] pattern"
            return;
        fi
        if [ $# = 2 ]; then sig=$1 ; fi
        for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
            pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
            if ask "Kill process $pid <$pname> with signal $sig?"
                then kill $sig $pid
            fi
        done
    }

    repeat() {          # Repeat n times command.
        local i max
        max=$1; shift;
        for ((i=1; i <= max ; i++)); do  # --> C-like syntax
            eval "$@";
        done
    }
    
    
    ask() {             # See 'killps' for example of use.
        echo -n "$@" '[y/n] ' ; read ans
        case "$ans" in
            y*|Y*) return 0 ;;
            *) return 1 ;;
        esac
    }
    
    corename() {        # Get name of app that created a corefile.
        for file ; do
            echo -n $file : ; gdb --core=$file --batch | head -1
        done 
    }

#   -----------------------------------
#   6_Networking
#   -----------------------------------

    alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
    alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
    alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
    alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
    alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
    alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
    alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
    alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
    alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
    alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

    my_ip() {           # Get IP adresses.
        MY_IP=$(/sbin/ifconfig ppp0 | awk '/inet/ { print $2 } ' | \
    sed -e s/addr://)
        MY_ISP=$(/sbin/ifconfig ppp0 | awk '/P-t-P/ { print $3 } ' | \
    sed -e s/P-t-P://)
    }

#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Memory stats :$NC " ; free
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        #my_ip 2>&- ;
        echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
        echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
        #echo -e "\n${RED}Open connections :$NC "; netstat -pan --inet;
        echo
    }

#   -----------------------------------
#   7_System_Operations_&_Information
#   -----------------------------------

    alias mountReadWrite='/sbin/mount -uw /'    # mountReadWrite:   For use when booted into single-user

#   cleanupDS:  Recursively delete .DS_Store files
#   -------------------------------------------------------------------
    alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"

#   finderShowHidden:   Show hidden files in Finder
#   finderHideHidden:   Hide hidden files in Finder
#   -------------------------------------------------------------------
    alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
    alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'

#   cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
#   -----------------------------------------------------------------------------------
    alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"

#    screensaverDesktop: Run a screensaver on the Desktop
#   -----------------------------------------------------------------------------------
    alias screensaverDesktop='/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background'

#   -----------------------------------
#   8_Web_Development
#   -----------------------------------

    alias apacheEdit='sudo edit /etc/httpd/httpd.conf'      # apacheEdit:       Edit httpd.conf
    alias apacheRestart='sudo apachectl graceful'           # apacheRestart:    Restart Apache
    alias editHosts='sudo edit /etc/hosts'                  # editHosts:        Edit /etc/hosts file
    alias herr='tail /var/log/httpd/error_log'              # herr:             Tails HTTP error logs
    alias apacheLogs="less +F /var/log/apache2/error_log"   # Apachelogs:   Shows apache error logs
    httpHeaders() { /usr/bin/curl -I -L $@ ; }              # httpHeaders:      Grabs headers from web page

#   httpDebug:  Download a web page and show info on what took time
#   -------------------------------------------------------------------
    httpDebug() { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }


#   ------------------------------------
#   9_Reminders_&_Notes
#   ------------------------------------

#   remove_disk: spin down unneeded disk
#   -------------------------------------------------------------------
#   diskutil eject /dev/disk1s3

#   to change the password on an encrypted disk image:
#   -------------------------------------------------------------------
#   hdiutil chpass /path/to/the/diskimage

#   to mount a read-only disk image as read-write:
#   -------------------------------------------------------------------
#   hdiutil attach example.dmg -shadow /tmp/example.shadow -noverify

#   mounting a removable drive (of type msdos or hfs)
#   -------------------------------------------------------------------
#   mkdir /Volumes/Foo
#   ls /dev/disk*   to find out the device to use in the mount command)
#   mount -t msdos /dev/disk1s1 /Volumes/Foo
#   mount -t hfs /dev/disk1s1 /Volumes/Foo

#   to create a file of a given size: /usr/sbin/mkfile or /usr/bin/hdiutil
#   -------------------------------------------------------------------
#   e.g.: mkfile 10m 10MB.dat
#   e.g.: hdiutil create -size 10m 10MB.dmg
#   the above create files that are almost all zeros - if random bytes are desired
#   then use: ~/Dev/Perl/randBytes 1048576 > 10MB.dat
